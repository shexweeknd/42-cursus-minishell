SIGNAUX:

- Ctrl + C [FINISHED] [TOTEST]
- Ctrl + D [FINISHED] [TOTEST]
- Ctrl + \ [FINISHED] [TOTEST]

GERER les leaks d'history lors des executions de commandes multiples

DEBUG de secondary prompt:
'''
    Minishell$ ls |
    > ^C
    Minishell$ ^C

    Minishell$
'''

GERER '&' comme process en fond


UPDATE :
[FINISHED] int	ft_get_info_len(char *cmd) ==> cmd_utils.c
[FINISHED] CORRIGER 'ls || ls | ls' qui quitte automatiquement
[FINISHED] 'echo $? + $?'
[FINISHED] 'echo "it works"' (doit afficher comme dans bash)
[FINISHED] 'echo it works' (doit afficher comme dans bash)
[FINISHED] - 'echo "cat lol.c | cat > lol.c"' (affiche 'cat lol.c | cat > lol.c' sans attendre)
[FINISHED] - '$? || echo $?'
[FINISHED] - 'cat | cat | ls' (affiche ls avant d'attendre le input de cat)
[FINISHED] - '> foo' (creer foo et passe a get_line())
[FINISHED] - '/bin/ls' (doit s'executer)
[FINISHED] - '/bin/pwd' (doit pouvoir lancer pwd)
[FINISHED] - 'cat /dev/random | ls' (doit executer ls sans attendre)
[FINISHED] - 'cd ~'
[FINISHED] - 'cd ~/path/of/your/choice/'
[FINISHED] - 'cd .'
[FINISHED] - 'cd ../'
[FINISHED] - 'cd -'
[FINISHED] - unset
[FINISHED] - export


MANDATORY TESTS:
    - status
    - exit
    - heredoc
    - '> <<eof'
    - ' >> sl >> | eof'
    - gestion des leaks pour : <<e | <<l

ERROR :
    - STATUS command not found = 127